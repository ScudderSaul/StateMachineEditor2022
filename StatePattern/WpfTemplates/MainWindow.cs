// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace StatePattern.WpfTemplates
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "Q:\code\Code_2015\StateMachine2015\StatePattern\WpfTemplates\MainWindow.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class MainWindow : MainWindowBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("<Window x:Class=\"");
            
            #line 1 "Q:\code\Code_2015\StateMachine2015\StatePattern\WpfTemplates\MainWindow.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StatePatternCodeGenerator.SmAppNameSpace));
            
            #line default
            #line hidden
            this.Write(".MainWindow\"\r\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/present" +
                    "ation\"\r\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n        " +
                    "  Title=\"");
            
            #line 4 "Q:\code\Code_2015\StateMachine2015\StatePattern\WpfTemplates\MainWindow.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StatePatternCodeGenerator.SmSmName));
            
            #line default
            #line hidden
            this.Write(" Example\">\r\n          <Grid>\r\n\r\n        <Grid.RowDefinitions>\r\n            <RowDe" +
                    "finition Height=\"4*\"></RowDefinition>\r\n            <RowDefinition Height=\"1*\"></" +
                    "RowDefinition>\r\n            <RowDefinition Height=\"6*\"></RowDefinition>\r\n       " +
                    "     <RowDefinition Height=\"4*\"></RowDefinition>\r\n        </Grid.RowDefinitions>" +
                    "\r\n        <GroupBox Grid.Row=\"0\" Grid.Column=\"0\" >\r\n            <GroupBox.Backgr" +
                    "ound>\r\n                <LinearGradientBrush EndPoint=\"0.5,1\" StartPoint=\"0.5,0\">" +
                    "\r\n                    <GradientStop Color=\"#FFD7D79D\" Offset=\"0\"/>\r\n            " +
                    "        <GradientStop Color=\"#FFE4E60C\" Offset=\"1\"/>\r\n                    <Gradi" +
                    "entStop Color=\"#FFBCBD5A\" Offset=\"0.434\"/>\r\n                    <GradientStop Co" +
                    "lor=\"#FFF2F323\" Offset=\"0.513\"/>\r\n                    <GradientStop Color=\"#FFE6" +
                    "E67B\" Offset=\"0.295\"/>\r\n                    <GradientStop Color=\"#FFC7C84E\" Offs" +
                    "et=\"0.716\"/>\r\n                    <GradientStop Color=\"#FFC7C74D\" Offset=\"0.188\"" +
                    "/>\r\n                </LinearGradientBrush>\r\n            </GroupBox.Background>\r\n" +
                    "            <GroupBox.Header>\r\n                <TextBlock Foreground=\"Black\" Fon" +
                    "tSize=\"9\" Text =\" XML State Machine\"></TextBlock>\r\n            </GroupBox.Header" +
                    ">\r\n            <ScrollViewer>\r\n                <TextBlock x:Name=\"StateMachineXM" +
                    "LBlock\" Foreground=\"Black\" Text=\"\"></TextBlock>\r\n            </ScrollViewer>\r\n  " +
                    "      </GroupBox>\r\n        <GroupBox Grid.Row=\"1\" Grid.Column=\"0\" Height=\"120\">\r" +
                    "\n            <GroupBox.Header>\r\n                <TextBlock Foreground=\"Black\" Fo" +
                    "ntSize=\"9\" Text =\"Status\"></TextBlock>\r\n            </GroupBox.Header>\r\n        " +
                    "    <GroupBox.Background>\r\n                <LinearGradientBrush EndPoint=\"0.5,1\"" +
                    " StartPoint=\"0.5,0\">\r\n                    <GradientStop Color=\"#FFE1DBC7\" Offset" +
                    "=\"0\"/>\r\n                    <GradientStop Color=\"#FFF3C31B\" Offset=\"1\"/>\r\n      " +
                    "          </LinearGradientBrush>\r\n            </GroupBox.Background>\r\n          " +
                    "  <Grid>\r\n                <Grid.ColumnDefinitions>\r\n                    <ColumnD" +
                    "efinition Width=\"1*\"></ColumnDefinition>\r\n                    <ColumnDefinition " +
                    "Width=\"1*\"></ColumnDefinition>\r\n                    <ColumnDefinition Width=\"1*\"" +
                    "></ColumnDefinition>\r\n                </Grid.ColumnDefinitions>\r\n\r\n             " +
                    "   <StackPanel  Grid.Column=\"0\">\r\n\r\n                    <TextBlock Text=\"Current" +
                    " State:\" Margin=\"2\"></TextBlock>\r\n                    <TextBlock x:Name=\"StateTe" +
                    "xtBlock\" Text=\"\" Margin=\"15,2,2,2\"></TextBlock>\r\n                </StackPanel>\r\n" +
                    "                <StackPanel  Grid.Column=\"1\"  >\r\n\r\n                    <TextBloc" +
                    "k Text=\"Most Recent Event:\" Margin=\"2\"></TextBlock>\r\n                    <TextBl" +
                    "ock x:Name=\"EventTextBlock\" Text=\"\" Margin=\"15,2,2,2\"></TextBlock>\r\n            " +
                    "    </StackPanel>\r\n                <StackPanel  Grid.Column=\"2\"  >\r\n\r\n          " +
                    "          <TextBlock Text=\"Most Recent Action:\" Margin=\"2\"></TextBlock>\r\n       " +
                    "             <TextBlock x:Name=\"ActionTextBlock\" Text=\"\" Margin=\"15,2,2,2\"></Tex" +
                    "tBlock>\r\n                </StackPanel>\r\n\r\n            </Grid>\r\n        </GroupBo" +
                    "x>\r\n        <Border BorderBrush=\"DarkBlue\" BorderThickness=\"2\"\r\n                " +
                    "Grid.Row=\"2\" Grid.Column=\"0\" Grid.ColumnSpan=\"3\">\r\n            <Border.Backgroun" +
                    "d>\r\n                <LinearGradientBrush EndPoint=\"0.5,1\" StartPoint=\"0.5,0\">\r\n " +
                    "                   <GradientStop Color=\"#FF25771E\" Offset=\"0\"/>\r\n               " +
                    "     <GradientStop Color=\"#FF63E215\" Offset=\"1\"/>\r\n                    <Gradient" +
                    "Stop Color=\"#FF4A6D36\" Offset=\"0.211\"/>\r\n                    <GradientStop Color" +
                    "=\"#FF329C28\" Offset=\"0.532\"/>\r\n                </LinearGradientBrush>\r\n         " +
                    "   </Border.Background>\r\n            <GroupBox >\r\n                <GroupBox.Head" +
                    "er>\r\n                    <TextBlock Foreground=\"White\" FontSize=\"9\" Text =\"Event" +
                    " Input\"></TextBlock>\r\n                </GroupBox.Header>\r\n                <Scrol" +
                    "lViewer>\r\n                    <StackPanel>\r\n                        <TextBlock x" +
                    ":Name=\"InputBlock\" Text=\"Start\" Foreground=\"Silver\" Margin=\"2\"></TextBlock>\r\n   " +
                    "                     <WrapPanel x:Name=\"InputWrapPanel\"  Margin=\"2\" ItemWidth=\"1" +
                    "20\" ItemHeight=\"30\"></WrapPanel>\r\n                    </StackPanel>\r\n           " +
                    "     </ScrollViewer>\r\n            </GroupBox>\r\n        </Border>\r\n        <Borde" +
                    "r Background=\"Black\" BorderBrush=\"DarkBlue\" BorderThickness=\"2\"\r\n               " +
                    " Grid.Row=\"3\" Grid.Column=\"0\" Grid.ColumnSpan=\"3\">\r\n            <GroupBox >\r\n   " +
                    "             <GroupBox.Header>\r\n                    <TextBlock Foreground=\"White" +
                    "\" FontSize=\"9\" Text =\"Trace output\"></TextBlock>\r\n                </GroupBox.Hea" +
                    "der>\r\n                <ScrollViewer>\r\n                    <TextBlock x:Name=\"Out" +
                    "putBlock\" Text=\"Start\" Foreground=\"Silver\" TextWrapping=\"Wrap\" Margin=\"2\"></Text" +
                    "Block>\r\n                </ScrollViewer>\r\n            </GroupBox>\r\n        </Bord" +
                    "er>\r\n    </Grid>\r\n</Window>\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class MainWindowBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
