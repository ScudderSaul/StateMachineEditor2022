#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StateMachineCodeGeneration
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="StateMachines")]
	public partial class StateMachineCodeDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertsmEvent(smEvent instance);
    partial void UpdatesmEvent(smEvent instance);
    partial void DeletesmEvent(smEvent instance);
    partial void InsertsmStateMachineDefinition(smStateMachineDefinition instance);
    partial void UpdatesmStateMachineDefinition(smStateMachineDefinition instance);
    partial void DeletesmStateMachineDefinition(smStateMachineDefinition instance);
    partial void InsertsmState(smState instance);
    partial void UpdatesmState(smState instance);
    partial void DeletesmState(smState instance);
    partial void InsertsmTransition(smTransition instance);
    partial void UpdatesmTransition(smTransition instance);
    partial void DeletesmTransition(smTransition instance);
    partial void InsertsmAction(smAction instance);
    partial void UpdatesmAction(smAction instance);
    partial void DeletesmAction(smAction instance);
    #endregion
		
		public StateMachineCodeDataContext() : 
				base(global::StateMachineCodeGeneration.Properties.Settings.Default.StateMachinesConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public StateMachineCodeDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public StateMachineCodeDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public StateMachineCodeDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public StateMachineCodeDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<smEvent> smEvents
		{
			get
			{
				return this.GetTable<smEvent>();
			}
		}
		
		public System.Data.Linq.Table<smStateMachineDefinition> smStateMachineDefinitions
		{
			get
			{
				return this.GetTable<smStateMachineDefinition>();
			}
		}
		
		public System.Data.Linq.Table<smState> smStates
		{
			get
			{
				return this.GetTable<smState>();
			}
		}
		
		public System.Data.Linq.Table<smTransition> smTransitions
		{
			get
			{
				return this.GetTable<smTransition>();
			}
		}
		
		public System.Data.Linq.Table<smAction> smActions
		{
			get
			{
				return this.GetTable<smAction>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.smEvents")]
	public partial class smEvent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _EventName;
		
		private long _EventID;
		
		private long _StateMachineDefinitionID;
		
		private EntityRef<smStateMachineDefinition> _smStateMachineDefinition;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventNameChanging(string value);
    partial void OnEventNameChanged();
    partial void OnEventIDChanging(long value);
    partial void OnEventIDChanged();
    partial void OnStateMachineDefinitionIDChanging(long value);
    partial void OnStateMachineDefinitionIDChanged();
    #endregion
		
		public smEvent()
		{
			this._smStateMachineDefinition = default(EntityRef<smStateMachineDefinition>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string EventName
		{
			get
			{
				return this._EventName;
			}
			set
			{
				if ((this._EventName != value))
				{
					this.OnEventNameChanging(value);
					this.SendPropertyChanging();
					this._EventName = value;
					this.SendPropertyChanged("EventName");
					this.OnEventNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", AutoSync=AutoSync.Always, DbType="BigInt NOT NULL IDENTITY", IsDbGenerated=true)]
		public long EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateMachineDefinitionID", DbType="BigInt NOT NULL")]
		public long StateMachineDefinitionID
		{
			get
			{
				return this._StateMachineDefinitionID;
			}
			set
			{
				if ((this._StateMachineDefinitionID != value))
				{
					if (this._smStateMachineDefinition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateMachineDefinitionIDChanging(value);
					this.SendPropertyChanging();
					this._StateMachineDefinitionID = value;
					this.SendPropertyChanged("StateMachineDefinitionID");
					this.OnStateMachineDefinitionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="smStateMachineDefinition_smEvent", Storage="_smStateMachineDefinition", ThisKey="StateMachineDefinitionID", OtherKey="StateMachineDefinitionID", IsForeignKey=true)]
		public smStateMachineDefinition smStateMachineDefinition
		{
			get
			{
				return this._smStateMachineDefinition.Entity;
			}
			set
			{
				smStateMachineDefinition previousValue = this._smStateMachineDefinition.Entity;
				if (((previousValue != value) 
							|| (this._smStateMachineDefinition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._smStateMachineDefinition.Entity = null;
						previousValue.smEvents.Remove(this);
					}
					this._smStateMachineDefinition.Entity = value;
					if ((value != null))
					{
						value.smEvents.Add(this);
						this._StateMachineDefinitionID = value.StateMachineDefinitionID;
					}
					else
					{
						this._StateMachineDefinitionID = default(long);
					}
					this.SendPropertyChanged("smStateMachineDefinition");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.smStateMachineDefinition")]
	public partial class smStateMachineDefinition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private string _InitialState;
		
		private long _StateMachineDefinitionID;
		
		private string _AsGuid;
		
		private EntitySet<smEvent> _smEvents;
		
		private EntitySet<smState> _smStates;
		
		private EntitySet<smTransition> _smTransitions;
		
		private EntitySet<smAction> _smActions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnInitialStateChanging(string value);
    partial void OnInitialStateChanged();
    partial void OnStateMachineDefinitionIDChanging(long value);
    partial void OnStateMachineDefinitionIDChanged();
    partial void OnAsGuidChanging(string value);
    partial void OnAsGuidChanged();
    #endregion
		
		public smStateMachineDefinition()
		{
			this._smEvents = new EntitySet<smEvent>(new Action<smEvent>(this.attach_smEvents), new Action<smEvent>(this.detach_smEvents));
			this._smStates = new EntitySet<smState>(new Action<smState>(this.attach_smStates), new Action<smState>(this.detach_smStates));
			this._smTransitions = new EntitySet<smTransition>(new Action<smTransition>(this.attach_smTransitions), new Action<smTransition>(this.detach_smTransitions));
			this._smActions = new EntitySet<smAction>(new Action<smAction>(this.attach_smActions), new Action<smAction>(this.detach_smActions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InitialState", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string InitialState
		{
			get
			{
				return this._InitialState;
			}
			set
			{
				if ((this._InitialState != value))
				{
					this.OnInitialStateChanging(value);
					this.SendPropertyChanging();
					this._InitialState = value;
					this.SendPropertyChanged("InitialState");
					this.OnInitialStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateMachineDefinitionID", AutoSync=AutoSync.Always, DbType="BigInt NOT NULL IDENTITY", IsDbGenerated=true)]
		public long StateMachineDefinitionID
		{
			get
			{
				return this._StateMachineDefinitionID;
			}
			set
			{
				if ((this._StateMachineDefinitionID != value))
				{
					this.OnStateMachineDefinitionIDChanging(value);
					this.SendPropertyChanging();
					this._StateMachineDefinitionID = value;
					this.SendPropertyChanged("StateMachineDefinitionID");
					this.OnStateMachineDefinitionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AsGuid", CanBeNull=false)]
		public string AsGuid
		{
			get
			{
				return this._AsGuid;
			}
			set
			{
				if ((this._AsGuid != value))
				{
					this.OnAsGuidChanging(value);
					this.SendPropertyChanging();
					this._AsGuid = value;
					this.SendPropertyChanged("AsGuid");
					this.OnAsGuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="smStateMachineDefinition_smEvent", Storage="_smEvents", ThisKey="StateMachineDefinitionID", OtherKey="StateMachineDefinitionID")]
		public EntitySet<smEvent> smEvents
		{
			get
			{
				return this._smEvents;
			}
			set
			{
				this._smEvents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="smStateMachineDefinition_smState", Storage="_smStates", ThisKey="StateMachineDefinitionID", OtherKey="StateMachineDefinitionID")]
		public EntitySet<smState> smStates
		{
			get
			{
				return this._smStates;
			}
			set
			{
				this._smStates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="smStateMachineDefinition_smTransition", Storage="_smTransitions", ThisKey="StateMachineDefinitionID", OtherKey="StateMachineDefinitionID")]
		public EntitySet<smTransition> smTransitions
		{
			get
			{
				return this._smTransitions;
			}
			set
			{
				this._smTransitions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="smStateMachineDefinition_smAction", Storage="_smActions", ThisKey="StateMachineDefinitionID", OtherKey="StateMachineDefinitionID")]
		public EntitySet<smAction> smActions
		{
			get
			{
				return this._smActions;
			}
			set
			{
				this._smActions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_smEvents(smEvent entity)
		{
			this.SendPropertyChanging();
			entity.smStateMachineDefinition = this;
		}
		
		private void detach_smEvents(smEvent entity)
		{
			this.SendPropertyChanging();
			entity.smStateMachineDefinition = null;
		}
		
		private void attach_smStates(smState entity)
		{
			this.SendPropertyChanging();
			entity.smStateMachineDefinition = this;
		}
		
		private void detach_smStates(smState entity)
		{
			this.SendPropertyChanging();
			entity.smStateMachineDefinition = null;
		}
		
		private void attach_smTransitions(smTransition entity)
		{
			this.SendPropertyChanging();
			entity.smStateMachineDefinition = this;
		}
		
		private void detach_smTransitions(smTransition entity)
		{
			this.SendPropertyChanging();
			entity.smStateMachineDefinition = null;
		}
		
		private void attach_smActions(smAction entity)
		{
			this.SendPropertyChanging();
			entity.smStateMachineDefinition = this;
		}
		
		private void detach_smActions(smAction entity)
		{
			this.SendPropertyChanging();
			entity.smStateMachineDefinition = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.smStates")]
	public partial class smState : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _StateName;
		
		private long _StateMachineDefinitionID;
		
		private long _StateID;
		
		private EntityRef<smStateMachineDefinition> _smStateMachineDefinition;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStateNameChanging(string value);
    partial void OnStateNameChanged();
    partial void OnStateMachineDefinitionIDChanging(long value);
    partial void OnStateMachineDefinitionIDChanged();
    partial void OnStateIDChanging(long value);
    partial void OnStateIDChanged();
    #endregion
		
		public smState()
		{
			this._smStateMachineDefinition = default(EntityRef<smStateMachineDefinition>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string StateName
		{
			get
			{
				return this._StateName;
			}
			set
			{
				if ((this._StateName != value))
				{
					this.OnStateNameChanging(value);
					this.SendPropertyChanging();
					this._StateName = value;
					this.SendPropertyChanged("StateName");
					this.OnStateNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateMachineDefinitionID", DbType="BigInt NOT NULL")]
		public long StateMachineDefinitionID
		{
			get
			{
				return this._StateMachineDefinitionID;
			}
			set
			{
				if ((this._StateMachineDefinitionID != value))
				{
					if (this._smStateMachineDefinition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateMachineDefinitionIDChanging(value);
					this.SendPropertyChanging();
					this._StateMachineDefinitionID = value;
					this.SendPropertyChanged("StateMachineDefinitionID");
					this.OnStateMachineDefinitionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateID", AutoSync=AutoSync.Always, DbType="BigInt NOT NULL IDENTITY", IsDbGenerated=true)]
		public long StateID
		{
			get
			{
				return this._StateID;
			}
			set
			{
				if ((this._StateID != value))
				{
					this.OnStateIDChanging(value);
					this.SendPropertyChanging();
					this._StateID = value;
					this.SendPropertyChanged("StateID");
					this.OnStateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="smStateMachineDefinition_smState", Storage="_smStateMachineDefinition", ThisKey="StateMachineDefinitionID", OtherKey="StateMachineDefinitionID", IsForeignKey=true)]
		public smStateMachineDefinition smStateMachineDefinition
		{
			get
			{
				return this._smStateMachineDefinition.Entity;
			}
			set
			{
				smStateMachineDefinition previousValue = this._smStateMachineDefinition.Entity;
				if (((previousValue != value) 
							|| (this._smStateMachineDefinition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._smStateMachineDefinition.Entity = null;
						previousValue.smStates.Remove(this);
					}
					this._smStateMachineDefinition.Entity = value;
					if ((value != null))
					{
						value.smStates.Add(this);
						this._StateMachineDefinitionID = value.StateMachineDefinitionID;
					}
					else
					{
						this._StateMachineDefinitionID = default(long);
					}
					this.SendPropertyChanged("smStateMachineDefinition");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.smTransitions")]
	public partial class smTransition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _StateMachineDefinitionID;
		
		private long _EventID;
		
		private long _EndStateID;
		
		private long _StateID;
		
		private long _ActionID;
		
		private long _Transition;
		
		private EntityRef<smStateMachineDefinition> _smStateMachineDefinition;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStateMachineDefinitionIDChanging(long value);
    partial void OnStateMachineDefinitionIDChanged();
    partial void OnEventIDChanging(long value);
    partial void OnEventIDChanged();
    partial void OnEndStateIDChanging(long value);
    partial void OnEndStateIDChanged();
    partial void OnStateIDChanging(long value);
    partial void OnStateIDChanged();
    partial void OnActionIDChanging(long value);
    partial void OnActionIDChanged();
    partial void OnTransitionChanging(long value);
    partial void OnTransitionChanged();
    #endregion
		
		public smTransition()
		{
			this._smStateMachineDefinition = default(EntityRef<smStateMachineDefinition>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateMachineDefinitionID", DbType="BigInt NOT NULL")]
		public long StateMachineDefinitionID
		{
			get
			{
				return this._StateMachineDefinitionID;
			}
			set
			{
				if ((this._StateMachineDefinitionID != value))
				{
					if (this._smStateMachineDefinition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateMachineDefinitionIDChanging(value);
					this.SendPropertyChanging();
					this._StateMachineDefinitionID = value;
					this.SendPropertyChanged("StateMachineDefinitionID");
					this.OnStateMachineDefinitionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", DbType="BigInt NOT NULL")]
		public long EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndStateID", DbType="BigInt NOT NULL")]
		public long EndStateID
		{
			get
			{
				return this._EndStateID;
			}
			set
			{
				if ((this._EndStateID != value))
				{
					this.OnEndStateIDChanging(value);
					this.SendPropertyChanging();
					this._EndStateID = value;
					this.SendPropertyChanged("EndStateID");
					this.OnEndStateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateID", DbType="BigInt NOT NULL")]
		public long StateID
		{
			get
			{
				return this._StateID;
			}
			set
			{
				if ((this._StateID != value))
				{
					this.OnStateIDChanging(value);
					this.SendPropertyChanging();
					this._StateID = value;
					this.SendPropertyChanged("StateID");
					this.OnStateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionID", DbType="BigInt NOT NULL")]
		public long ActionID
		{
			get
			{
				return this._ActionID;
			}
			set
			{
				if ((this._ActionID != value))
				{
					this.OnActionIDChanging(value);
					this.SendPropertyChanging();
					this._ActionID = value;
					this.SendPropertyChanged("ActionID");
					this.OnActionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Transition", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Transition
		{
			get
			{
				return this._Transition;
			}
			set
			{
				if ((this._Transition != value))
				{
					this.OnTransitionChanging(value);
					this.SendPropertyChanging();
					this._Transition = value;
					this.SendPropertyChanged("Transition");
					this.OnTransitionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="smStateMachineDefinition_smTransition", Storage="_smStateMachineDefinition", ThisKey="StateMachineDefinitionID", OtherKey="StateMachineDefinitionID", IsForeignKey=true)]
		public smStateMachineDefinition smStateMachineDefinition
		{
			get
			{
				return this._smStateMachineDefinition.Entity;
			}
			set
			{
				smStateMachineDefinition previousValue = this._smStateMachineDefinition.Entity;
				if (((previousValue != value) 
							|| (this._smStateMachineDefinition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._smStateMachineDefinition.Entity = null;
						previousValue.smTransitions.Remove(this);
					}
					this._smStateMachineDefinition.Entity = value;
					if ((value != null))
					{
						value.smTransitions.Add(this);
						this._StateMachineDefinitionID = value.StateMachineDefinitionID;
					}
					else
					{
						this._StateMachineDefinitionID = default(long);
					}
					this.SendPropertyChanged("smStateMachineDefinition");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.smActions")]
	public partial class smAction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ActionName;
		
		private long _StateMachineDefinitionID;
		
		private long _ActionID;
		
		private EntityRef<smStateMachineDefinition> _smStateMachineDefinition;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActionNameChanging(string value);
    partial void OnActionNameChanged();
    partial void OnStateMachineDefinitionIDChanging(long value);
    partial void OnStateMachineDefinitionIDChanged();
    partial void OnActionIDChanging(long value);
    partial void OnActionIDChanged();
    #endregion
		
		public smAction()
		{
			this._smStateMachineDefinition = default(EntityRef<smStateMachineDefinition>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ActionName
		{
			get
			{
				return this._ActionName;
			}
			set
			{
				if ((this._ActionName != value))
				{
					this.OnActionNameChanging(value);
					this.SendPropertyChanging();
					this._ActionName = value;
					this.SendPropertyChanged("ActionName");
					this.OnActionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateMachineDefinitionID", DbType="BigInt NOT NULL")]
		public long StateMachineDefinitionID
		{
			get
			{
				return this._StateMachineDefinitionID;
			}
			set
			{
				if ((this._StateMachineDefinitionID != value))
				{
					if (this._smStateMachineDefinition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateMachineDefinitionIDChanging(value);
					this.SendPropertyChanging();
					this._StateMachineDefinitionID = value;
					this.SendPropertyChanged("StateMachineDefinitionID");
					this.OnStateMachineDefinitionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionID", AutoSync=AutoSync.Always, DbType="BigInt NOT NULL IDENTITY", IsDbGenerated=true)]
		public long ActionID
		{
			get
			{
				return this._ActionID;
			}
			set
			{
				if ((this._ActionID != value))
				{
					this.OnActionIDChanging(value);
					this.SendPropertyChanging();
					this._ActionID = value;
					this.SendPropertyChanged("ActionID");
					this.OnActionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="smStateMachineDefinition_smAction", Storage="_smStateMachineDefinition", ThisKey="StateMachineDefinitionID", OtherKey="StateMachineDefinitionID", IsForeignKey=true)]
		public smStateMachineDefinition smStateMachineDefinition
		{
			get
			{
				return this._smStateMachineDefinition.Entity;
			}
			set
			{
				smStateMachineDefinition previousValue = this._smStateMachineDefinition.Entity;
				if (((previousValue != value) 
							|| (this._smStateMachineDefinition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._smStateMachineDefinition.Entity = null;
						previousValue.smActions.Remove(this);
					}
					this._smStateMachineDefinition.Entity = value;
					if ((value != null))
					{
						value.smActions.Add(this);
						this._StateMachineDefinitionID = value.StateMachineDefinitionID;
					}
					else
					{
						this._StateMachineDefinitionID = default(long);
					}
					this.SendPropertyChanged("smStateMachineDefinition");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
