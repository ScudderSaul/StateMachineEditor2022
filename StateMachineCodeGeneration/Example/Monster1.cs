// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace StateMachineCodeGeneration.Example
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "Q:\code\Code_2015\StateMachine2015\StateMachineCodeGeneration\Example\Monster.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class Monster : MonsterBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<StateMachine Name=\"Monster\" Start=\"Movin" +
                    "g\" Current=\"Moving\">\r\n  <Actions>\r\n    <Action ActionName=\"LookAbout\" />\r\n    <A" +
                    "ction ActionName=\"ChompEnemy\" />\r\n    <Action ActionName=\"ChargeEnemy\" />\r\n    <" +
                    "Action ActionName=\"Nothing\" />\r\n    <Action ActionName=\"GoToFriend\" />\r\n    <Act" +
                    "ion ActionName=\"RunAway\" />\r\n    <Action ActionName=\"Rebirth\" />\r\n    <Action Ac" +
                    "tionName=\"Purr\" />\r\n  </Actions>\r\n  <Events>\r\n    <Event EventName=\"EnemyClose\" " +
                    "/>\r\n    <Event EventName=\"EnemyFound\" />\r\n    <Event EventName=\"EnemySuspected\" " +
                    "/>\r\n    <Event EventName=\"FriendDetected\" />\r\n    <Event EventName=\"FriendFound\"" +
                    " />\r\n    <Event EventName=\"FriendNear\" />\r\n    <Event EventName=\"Wounded\" />\r\n  " +
                    "  <Event EventName=\"Healed\" />\r\n    <Event EventName=\"Dies\" />\r\n    <Event Event" +
                    "Name=\"EnemyDies\" />\r\n    <Event EventName=\"EnemyDamaged\" />\r\n    <Event EventNam" +
                    "e=\"CriticalWound\" />\r\n    <Event EventName=\"EnemyEscaped\" />\r\n    <Event EventNa" +
                    "me=\"Miracle\" />\r\n    <Event EventName=\"NewEvent14\" />\r\n  </Events>\r\n  <States>\r\n" +
                    "    <State StateName=\"Moving\" />\r\n    <State StateName=\"Chasing\" />\r\n    <State " +
                    "StateName=\"Fleeing\" />\r\n    <State StateName=\"Fighting\" />\r\n    <State StateName" +
                    "=\"Searching\" />\r\n    <State StateName=\"Dead\" />\r\n    <State StateName=\"Waiting\" " +
                    "/>\r\n  </States>\r\n  <Transitions>\r\n    <Transition Initial=\"Moving\" Event=\"EnemyS" +
                    "uspected\" Action=\"LookAbout\" Final=\"Searching\" />\r\n    <Transition Initial=\"Movi" +
                    "ng\" Event=\"EnemyClose\" Action=\"ChompEnemy\" Final=\"Fighting\" />\r\n    <Transition " +
                    "Initial=\"Moving\" Event=\"EnemyFound\" Action=\"ChargeEnemy\" Final=\"Fighting\" />\r\n  " +
                    "  <Transition Initial=\"Moving\" Event=\"FriendDetected\" Action=\"Nothing\" Final=\"Mo" +
                    "ving\" />\r\n    <Transition Initial=\"Moving\" Event=\"FriendNear\" Action=\"GoToFriend" +
                    "\" Final=\"Waiting\" />\r\n    <Transition Initial=\"Chasing\" Event=\"EnemyClose\" Actio" +
                    "n=\"ChompEnemy\" Final=\"Fighting\" />\r\n    <Transition Initial=\"Chasing\" Event=\"Ene" +
                    "myEscaped\" Action=\"LookAbout\" Final=\"Searching\" />\r\n    <Transition Initial=\"Cha" +
                    "sing\" Event=\"EnemyFound\" Action=\"ChargeEnemy\" Final=\"Fighting\" />\r\n    <Transiti" +
                    "on Initial=\"Fleeing\" Event=\"EnemyClose\" Action=\"RunAway\" Final=\"Fleeing\" />\r\n   " +
                    " <Transition Initial=\"Fleeing\" Event=\"EnemySuspected\" Action=\"RunAway\" Final=\"Fl" +
                    "eeing\" />\r\n    <Transition Initial=\"Fleeing\" Event=\"EnemyFound\" Action=\"RunAway\"" +
                    " Final=\"Fleeing\" />\r\n    <Transition Initial=\"Fleeing\" Event=\"FriendDetected\" Ac" +
                    "tion=\"LookAbout\" Final=\"Searching\" />\r\n    <Transition Initial=\"Fleeing\" Event=\"" +
                    "FriendFound\" Action=\"GoToFriend\" Final=\"Waiting\" />\r\n    <Transition Initial=\"Fl" +
                    "eeing\" Event=\"FriendNear\" Action=\"Nothing\" Final=\"Waiting\" />\r\n    <Transition I" +
                    "nitial=\"Fighting\" Event=\"EnemyClose\" Action=\"ChompEnemy\" Final=\"Fighting\" />\r\n  " +
                    "  <Transition Initial=\"Fighting\" Event=\"Wounded\" Action=\"ChompEnemy\" Final=\"Figh" +
                    "ting\" />\r\n    <Transition Initial=\"Fighting\" Event=\"CriticalWound\" Action=\"RunAw" +
                    "ay\" Final=\"Fleeing\" />\r\n    <Transition Initial=\"Fighting\" Event=\"EnemyDamaged\" " +
                    "Action=\"ChompEnemy\" Final=\"Fighting\" />\r\n    <Transition Initial=\"Fighting\" Even" +
                    "t=\"EnemyDies\" Action=\"Nothing\" Final=\"Moving\" />\r\n    <Transition Initial=\"Fight" +
                    "ing\" Event=\"Dies\" Action=\"Nothing\" Final=\"Dead\" />\r\n    <Transition Initial=\"Fig" +
                    "hting\" Event=\"EnemyEscaped\" Action=\"LookAbout\" Final=\"Searching\" />\r\n    <Transi" +
                    "tion Initial=\"Searching\" Event=\"EnemyFound\" Action=\"ChargeEnemy\" Final=\"Chasing\"" +
                    " />\r\n    <Transition Initial=\"Searching\" Event=\"FriendFound\" Action=\"GoToFriend\"" +
                    " Final=\"Moving\" />\r\n    <Transition Initial=\"Searching\" Event=\"FriendNear\" Actio" +
                    "n=\"GoToFriend\" Final=\"Waiting\" />\r\n    <Transition Initial=\"Searching\" Event=\"En" +
                    "emyEscaped\" Action=\"Nothing\" Final=\"Moving\" />\r\n    <Transition Initial=\"Waiting" +
                    "\" Event=\"Healed\" Action=\"Purr\" Final=\"Moving\" />\r\n    <Transition Initial=\"Waiti" +
                    "ng\" Event=\"EnemySuspected\" Action=\"LookAbout\" Final=\"Waiting\" />\r\n    <Transitio" +
                    "n Initial=\"Waiting\" Event=\"EnemyFound\" Action=\"ChargeEnemy\" Final=\"Chasing\" />\r\n" +
                    "    <Transition Initial=\"Dead\" Event=\"Miracle\" Action=\"Rebirth\" Final=\"Moving\" /" +
                    ">\r\n  </Transitions>\r\n</StateMachine>");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class MonsterBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
